plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.4'
	id 'io.spring.dependency-management' version '1.1.3'
	id "com.google.osdetector" version "1.7.3"
	id 'com.google.cloud.tools.jib' version '3.4.0'
	id 'jacoco'
	id('org.sonarqube') version '4.3.1.3277'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
	targetCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}

ext {
	set('springCloudVersion', "2022.0.4")
}


sonarqube {
	// properties 값을 입력하지 않으면 default 로 들어가는 값들이 많음
	properties {
		// 1. jacoco 설정에서 destinationFile 값이 defaul
		property("sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/../target/jacoco.exec")
		// 2. 검사 시 제외할 파일을 지정한다. (공식문서에서 정보가 부족해 빈칸으로 남겨둠)
		// property("sonar.exclusions", "")
		// 3.
		property("sonar.java.binaries", "${buildDir}/classes")
	}
}

jacoco {
	toolVersion = '0.8.10'
}

test {
	// 1.
	finalizedBy 'jacocoTestReport'
	useJUnitPlatform()
	// 2.
	jacoco {
		// 2-1.
		// destinationFile = layout.buildDirectory.file('jacoco/jacoco.exec').get().getAsFile()
		// 2-2.
		// classDumpDir = layout.buildDirectory.dir('jacoco/classpathdumps').get().getAsFile()
		// 2-3.
		excludes = [
				"com/example/**/exception/**",
				"com/example/**/entity/**"
		]
	}
}

jacocoTestReport {
	// 1.
	dependsOn test
	
	// 2.
	reports {
		html.required = true
		xml.required = true
		csv.required = true
		
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
	// 3.
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it,
					exclude: [
							"com/example/**/exception/**",
							"com/example/**/entity/**"
					]
			)
		}))
	}
	// 4.
	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	violationRules {
		// 1.
		rule {
			limit {
				minimum = 0.3
			}
		}
		// 2.
		rule {
			enabled = false
			element = 'CLASS'
			includes = ['org.gradle.*']
			
			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 0.3
			}
		}
	}
}


tasks.named('test') {
	useJUnitPlatform()
}


dependencies {
	implementation ('org.springframework.boot:spring-boot-starter-actuator:3.1.0')
	implementation ('org.springframework.boot:spring-boot-starter-data-jpa:3.0.4')
	implementation ('org.springframework.boot:spring-boot-starter-oauth2-client:3.0.4')
	implementation ('org.springframework.boot:spring-boot-starter-security:3.0.4')
	implementation ('org.springframework.boot:spring-boot-starter-web:3.1.0')
	implementation ('com.okta.spring:okta-spring-boot-starter:3.0.5')
	implementation ('io.micrometer:micrometer-tracing-bridge-brave:1.0.3')
	implementation ('io.zipkin.reporter2:zipkin-reporter-brave:2.16.3')
	implementation ('org.springframework.cloud:spring-cloud-starter:4.0.1')
	implementation ('org.springframework.cloud:spring-cloud-starter-config:4.0.1')
	implementation ('org.springframework.cloud:spring-cloud-starter-openfeign:4.0.1')
	implementation ('org.springframework.cloud:spring-cloud-starter-loadbalancer:4.0.1')
	implementation ('org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j:3.0.0')
	compileOnly ('org.projectlombok:lombok:1.18.26')
	developmentOnly ('org.springframework.boot:spring-boot-devtools:3.0.4')
	runtimeOnly ('com.h2database:h2:2.1.214')
	runtimeOnly ('com.mysql:mysql-connector-j:8.0.32')
	annotationProcessor ('org.springframework.boot:spring-boot-configuration-processor:3.0.4')
	annotationProcessor ('org.projectlombok:lombok:1.18.26')
	testImplementation ('org.springframework.boot:spring-boot-starter-test:3.1.0')
	testImplementation ('org.springframework.security:spring-security-test:6.0.2')
	// https://mvnrepository.com/artifact/com.github.tomakehurst/wiremock
	testImplementation ('com.github.tomakehurst:wiremock-jre8:3.0.1')
	
	// netty 관련 오류 해결, 애플 실리콘 맥북에서만 발생하는 걸로 추정
	if (osdetector.arch == "aarch_64") {
		implementation("io.netty:netty-resolver-dns-native-macos:4.1.79.Final:osx-aarch_64")
	}
	
	runtimeOnly ('org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.3')
	
	
	// -- swagger ui --
	implementation('org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0')
	
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

jar {
	enabled = false
}

jib {
	from {
		image = 'openjdk:17'
	}
	to {
		image = System.getProperty('REPO_URL') + '/order-service'
		tags = ['0.0.1', 'latest']
	}
}


